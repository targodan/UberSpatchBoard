/*
 * The MIT License
 *
 * Copyright 2017 Luca Corbatto.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package de.targodan.usb.ui;

import de.targodan.usb.Program;
import de.targodan.usb.config.Config;
import de.targodan.usb.config.IRCClientRegistry;
import java.awt.Window;
import java.io.File;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author corbatto
 */
public class SettingsWindow extends javax.swing.JDialog {

    /**
     * Creates new form SettingsWindow
     */
    public SettingsWindow(Window owner) {
        super(owner);
        initComponents();
        
        this.fileChooser = new JFileChooser();
        this.fileChooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File file) {
                return file.isDirectory() || (file.isFile() && file.getName().substring(file.getName().lastIndexOf(".")+1).toLowerCase().equals("log"));
            }

            @Override
            public String getDescription() {
                return "*.log - Logfile";
            }
        });
        
        this.ircClient.setModel(new DefaultComboBoxModel<>(
                IRCClientRegistry.getSupportedClients().stream()
                .map(client -> client.getName())
                .toArray(String[]::new)
        ));
        if(Program.CONFIG != null) {
            this.cleardCaseRemovalSeconds.setText(Float.toString(Program.CONFIG.secondsUntilClearedCasesAreRemoved));
            if(Program.CONFIG.dataSources.size() > 0) {
                this.logfile.setText(Program.CONFIG.dataSources.get(0).path);
                this.ircClient.setSelectedItem(Program.CONFIG.dataSources.get(0).type);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ircClient = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        logfile = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        cleardCaseRemovalSeconds = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("USB - Settings");

        java.awt.GridBagLayout jPanel1Layout = new java.awt.GridBagLayout();
        jPanel1Layout.columnWidths = new int[] {0, 5, 0, 5, 0};
        jPanel1Layout.rowHeights = new int[] {0, 10, 0, 10, 0, 10, 0, 10, 0};
        jPanel1Layout.columnWeights = new double[] {0.0, 0.0, 1.0, 0.0, 0.0};
        jPanel1.setLayout(jPanel1Layout);

        jLabel1.setText("IRCClient");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(jLabel1, gridBagConstraints);

        ircClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onIRCClientChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        jPanel1.add(ircClient, gridBagConstraints);

        jLabel2.setText("Logfile");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(jLabel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        jPanel1.add(logfile, gridBagConstraints);

        jButton1.setText("...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSearchFileClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(jButton1, gridBagConstraints);

        jButton2.setText("Save");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSaveClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        jPanel1.add(jButton2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jSeparator1, gridBagConstraints);

        jLabel3.setText("Cleared Case Removal");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(jLabel3, gridBagConstraints);

        cleardCaseRemovalSeconds.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        jPanel1.add(cleardCaseRemovalSeconds, gridBagConstraints);

        jLabel4.setText("Seconds");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        jPanel1.add(jLabel4, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onSearchFileClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSearchFileClicked
        int result = this.fileChooser.showOpenDialog(this);
        if(result == JFileChooser.APPROVE_OPTION) {
            String path = this.fileChooser.getSelectedFile().getAbsolutePath();
            this.logfile.setText(path);
            this.updateConfig();
        }
    }//GEN-LAST:event_onSearchFileClicked

    private void onIRCClientChange(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onIRCClientChange
        this.updateConfig();
    }//GEN-LAST:event_onIRCClientChange

    private void onSaveClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSaveClicked
        if(this.updateConfig()) {
            Config.writeConfig(Program.CONFIG, Program.CONFIG_FILE);
            JOptionPane.showMessageDialog(this, "You need to restart the UberSpatchBoard for the changes to take effect.", "Sorry", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
        }
    }//GEN-LAST:event_onSaveClicked

    private boolean updateConfig() {
        Program.CONFIG.dataSources.clear();
        Config.DataSource ds = new Config.DataSource();
        ds.path = this.logfile.getText();
        ds.type = (String)this.ircClient.getSelectedItem();
        Program.CONFIG.dataSources.add(ds);
        try {
            String secondsTxt = this.cleardCaseRemovalSeconds.getText().trim();
            if(secondsTxt.length() > 0) {
                Program.CONFIG.secondsUntilClearedCasesAreRemoved = Float.parseFloat(secondsTxt);
            }
        } catch(NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Cleared case removal time needs to be a number.", "Sorry", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        return true;
    }
    
    private JFileChooser fileChooser;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cleardCaseRemovalSeconds;
    private javax.swing.JComboBox<String> ircClient;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField logfile;
    // End of variables declaration//GEN-END:variables
}
